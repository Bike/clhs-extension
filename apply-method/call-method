Local Macro CALL-METHOD

Syntax:

  (call-method method &rest method-arguments) => results

Arguments and Values:

  method - a method or a MAKE-METHOD expression.
  method-arguments - objects; evaluation varies (see Description).
  results - the values returned by the method invocation.

Description:

  The macro CALL-METHOD is used in method combination. It hides the implementation-dependent details of how arguments are passed to methods. The macro CALL-METHOD has lexical scope and can only be used within an effective method form, or within a MAKE-METHOD expression.

  Whether or not CALL-METHOD is fbound in the global environment is implementation-dependent; however, the restrictions on redefinition and shadowing of CALL-METHOD are the same as for symbols in the common-lisp package which are fbound in the global environment. The consequences of attempting to use CALL-METHOD outside of an effective method form are undefined.

  [first change] (call-method method ...etc) behaves as if it expands into (apply-method method (...etc) ...args). As such, the nature of the method-arguments and how they are treated is dependent on the expansion of APPLY-METHOD; see the description of EXPAND-APPLY-METHOD for more information. The argument forms are implementation-dependent, but will evaluate to a spreadable argument list generator for the arguments passed to the method being called. If the invocation of CALL-METHOD is within a MAKE-METHOD expression, the arguments are those that were conceptually supplied to that method. Otherwise the arguments are those that were supplied to the effective method.

  For standard methods, the method-arguments must match the lambda-list (&optional next-method-list &rest rest), and next-method-list must be a list whose elements are methods and MAKE-METHOD expressions. See EXPAND-APPLY-METHOD for details. All standard method combinations only use CALL-METHOD forms of this type.

See also:

  CALL-METHOD, MAKE-METHOD, EXPAND-APPLY-METHOD, DEFINE-METHOD-COMBINATION
