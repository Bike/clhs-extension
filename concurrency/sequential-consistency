A set of evaluations is sequentially consistent iff there is a total order on them, and this order is consistent with the program's happens-before order. In other words, for any two sequentially consistent operations, one happens-before the other. This means that any sequentially consistent evaluation observes the side effects of all sequentially consistent evaluations that happen-before it. If evaluations across threads are sequentially consistent, the execution of the program consists of an interleaving of these evaluations in some order that is undefined other than being consistent with the sequenced-before order.

Sequential consistency is a simple and intuitive notion of concurrency, but some concurrent programs are not sequentially consistent. Some compiler optimizations, as well as runtime optimizations like per-thread caches, defeat sequential consistency, and so to guarantee sequential consistency requested by the programmer, an implementation may have to disable certain optimizations. As such, it is important that programmers be aware of the more complex behaviors that they may have to deal with.
